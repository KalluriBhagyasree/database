-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3307
-- Generation Time: Mar 10, 2025 at 02:26 AM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `project_db`
--

-- --------------------------------------------------------

--
-- Table structure for table `cpp`
--

CREATE TABLE `cpp` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `cpp`
--

INSERT INTO `cpp` (`id`, `title`, `content`) VALUES
(1, 'Introduction to cpp', '<h1>Introduction to C++ Programming Language</h1>\r\nC++ is a general-purpose programming language that was developed as an enhancement of the C language to include object-oriented paradigm. It is an imperative and a compiled language. </br></br>\r\n\r\n1.  C++ is a high-level, general-purpose programming language designed for system and application programming. It was developed by Bjarne Stroustrup at Bell Labs in 1983 as an extension of the C programming language. C++ is an object-oriented, multi-paradigm language that supports procedural, functional, and generic programming styles.<br>\r\n2.  One of the key features of C++ is its ability to support low-level, system-level programming, making it suitable for developing operating systems, device drivers, and other system software. At the same time, C++ also provides a rich set of libraries and features for high-level application programming, making it a popular choice for developing desktop applications, video games, and other complex applications.</br>\r\n3.  C++ has a large, active community of developers and users, and a wealth of resources and tools available for learning and using the language. Some of the key features of C++ include:</br>\r\n4.  Object-Oriented Programming: C++ supports object-oriented programming, allowing developers to create classes and objects and to define methods and properties for these objects.</br>\r\n5.  Templates: C++ templates allow developers to write generic code that can work with any data type, making it easier to write reusable and flexible code.</br>\r\n6.  Standard Template Library (STL): The STL provides a wide range of containers and algorithms for working with data, making it easier to write efficient and effective code.</br>\r\n7.  Exception Handling: C++ provides robust exception handling capabilities, making it easier to write code that can handle errors and unexpected situations.</br></br>\r\nOverall, C++ is a powerful and versatile programming language that is widely used for a range of applications and is well-suited for both low-level system programming and high-level application development. If you wish to learn C++ then you can enroll in our C++ Course provides a comprehensive introduction to the C++ programming language, covering its fundamentals and best practices.</br></br>\r\nC++ is a middle-level language rendering it the advantage of programming low-level (drivers, kernels) and even higher-level applications (games, GUI, desktop apps etc.). The basic syntax and code structure of both C and C++ are the same. </br>\r\n\r\nSome of the features & key-points to note about the programming language are as follows:</br></br>\r\n<ol>\r\n<li>Simple: It is a simple language in the sense that programs can be broken down into logical units and parts, has a rich library support and a variety of data-types.</li>\r\n<li>Machine Independent but Platform Dependent: A C++ executable is not platform-independent (compiled programs on Linux won’t run on Windows), however they are machine independent.</li>\r\n<li>Mid-level language: It is a mid-level language as we can do both systems-programming (drivers, kernels, networking etc.) and build large-scale user applications (Media Players, Photoshop, Game Engines etc.)</li>\r\n<li>Rich library support: Has a rich library support (Both standard ~ built-in data structures, algorithms etc.) as well 3rd party libraries (e.g. Boost libraries) for fast and rapid development.</li>\r\n<li>Speed of execution: C++ programs excel in execution speed. Since, it is a compiled language, and also hugely procedural. Newer languages have extra in-built default features such as garbage-collection, dynamic typing etc. which slow the execution of the program overall. Since there is no additional processing overhead like this in C++, it is blazing fast.</li>\r\n<li>Pointer and direct Memory-Access: C++ provides pointer support which aids users to directly manipulate storage address. This helps in doing low-level programming (where one might need to have explicit control on the storage of variables).</li>\r\n<li>Object-Oriented: One of the strongest points of the language which sets it apart from C. Object-Oriented support helps C++ to make maintainable and extensible programs. i.e. Large-scale applications can be built. Procedural code becomes difficult to maintain as code-size grows.</li>\r\n<li>Compiled Language: C++ is a compiled language, contributing to its speed.</li></ol>\r\n<b>Here are some key points to keep in mind while working with C++:</b>\r\n<ol>\r\n<li>Object-Oriented Programming: C++ is an object-oriented programming language, which means that it allows you to define classes and objects to model real-world entities and their behavior.</li>\r\n<li>Strong Type System: C++ has a strong type system, which means that variables have a specific type and that type must be respected in all operations performed on that variable.</li>\r\n<li>Low-level Access: C++ provides low-level access to system resources, which makes it a suitable choice for system programming and writing efficient code.</li>\r\n<li>Standard Template Library (STL): The STL provides a large set of pre-written algorithms and data structures that can be used to simplify your code and make it more efficient.</li>\r\n<li>Cross-platform Compatibility: C++ can be compiled and run on multiple platforms, including Windows, MacOS, and Linux, making it a versatile language for developing cross-platform applications.</li>\r\n<li>Performance: C++ is a compiled language, which means that code is transformed into machine code before it is executed. This can result in faster execution times and improved performance compared to interpreted languages like Python.</li>\r\n<li>Memory Management: C++ requires manual memory management, which can lead to errors if not done correctly. However, this also provides more control over the program’s memory usage and can result in more efficient memory usage.\r\nSyntax: C++ has a complex syntax that can be difficult to learn, especially for beginners. However, with practice and experience, it becomes easier to understand and work with.</li></ol>\r\n</br></br>\r\nThese are some of the key points to keep in mind when working with C++. By understanding these concepts, you can make informed decisions and write effective code in this language.</br>\r\n\r\n<h3>Applications of C++: </h3></br>\r\nC++ finds varied usage in applications such as:</br></br>\r\n*Operating Systems & Systems Programming. e.g. Linux-based OS (Ubuntu etc.)</br>\r\n*Browsers (Chrome & Firefox)</br>\r\n*Graphics & Game engines (Photoshop, Blender, Unreal-Engine)</br>\r\n*Database Engines (MySQL, MongoDB, Redis etc.)</br>\r\n*Cloud/Distributed Systems</br>\r\n'),
(2, 'Features of c++', '<h2>Features of C++</h2>\r\nC++ is a general-purpose programming language that was developed as an enhancement of the C language to include an object-oriented paradigm. It is an imperative and compiled language. C++ has a number of features, including:</br></br>\r\n\r\n-> Object-Oriented Programming</br>\r\n-> Machine Independent</br>\r\n-> Simple</br>\r\n-> High-Level Language</br>\r\n-> Popular</br>\r\n-> Case-sensitive</br>\r\n-> Compiler Based</br>\r\n-> Dynamic Memory Allocation</br>\r\n-> Memory Management</br>\r\n-> Multi-threading</br>\r\n</br>\r\n<b>1. Object-Oriented Programming</b>\r\nC++ is an Object-Oriented Programming Language, unlike C which is a procedural programming language. This is the most important feature of C++. It can create/destroy objects while programming. Also, It can create blueprints with which objects can be created. We have discussed the Object-Orient Programming Concepts in C++ in this article.</br>\r\n<b>2. Machine Independent</b>\r\nA C++ executable is not platform-independent (compiled programs on Linux won’t run on Windows), however, they are machine-independent. Let us understand this feature of C++ with the help of an example. Suppose you have written a piece of code that can run on Linux/Windows/Mac OSx which makes the C++ Machine Independent but the executable file of the C++ cannot run on different operating systems.</br>\r\n\r\n<b>3. Simple</b>\r\nIt is a simple language in the sense that programs can be broken down into logical units and parts, has rich library support and has a variety of data types. Also, the Auto Keyword of C++ makes life easier</br>\r\n<b>4. High-Level Language</b>\r\nC++ is a High-Level Language, unlike C which is a Mid-Level Programming Language. It makes life easier to work in C++ as it is a high-level language it is closely associated with the human-comprehensible English language.</br>\r\n\r\n<b>5. Popular</b>\r\nC++ can be the base language for many other programming languages that supports the feature of object-oriented programming. Bjarne Stroustrup found Simula 67, the first object-oriented language ever, lacking simulations, and decided to develop C++.</br>\r\n<b>6. Case-sensitive</b>\r\nIt is clear that C++ is a case-sensitive programming language. For example, cin is used to take input from the input stream. But if the “Cin” won’t work. Other languages like HTML and MySQL are not case-sensitive languages.</br>\r\n\r\n<b>7. Compiler Based</b>\r\nC++ is a compiler-based language, unlike Python. That is C++ programs used to be compiled and their executable file is used to run them. C++ is a relatively faster language than Java and Python.</br>\r\n\r\n<b>8. Dynamic Memory Allocation</b>\r\nWhen the program executes in C++ then the variables are allocated the dynamical heap space. Inside the functions, the variables are allocated in the stack space. Many times, We are not aware in advance how much memory is needed to store particular information in a defined variable and the size of required memory can be determined at run time.</br>\r\n<b>9. Memory Management</b></br>\r\n*C++ allows us to allocate the memory of a variable or an array in run time. This is known as Dynamic Memory Allocation.<br>\r\n*In other programming languages such as Java and Python, the compiler automatically manages the memories allocated to variables. But this is not the case in C++.</br>\r\n*In C++, the memory must be de-allocated dynamically allocated memory manually after it is of no use.</br>\r\n*The allocation and deallocation of the memory can be done using the new and delete operators respectively.</br>\r\n<b>10. Multi-threading</b></br>\r\n*Multithreading is a specialized form of multitasking and multitasking is a feature that allows your system to execute two or more programs concurrently. In general, there are two sorts of multitasking: process-based and thread-based.</br>\r\n*Process-based multitasking handles the concurrent execution of programs. Thread-based multitasking deals with the multiprogramming of pieces of an equivalent program.</br>\r\n*A multithreaded program contains two or more parts that will run concurrently. Each part of such a program is named a thread, and every thread defines a separate path of execution.</br>\r\n*Starting from C++11, the standard library provides cross-platform multithreading support via std::thread, making it easier to work with threads in a portable way.'),
(3, 'c++ Basics', '<h1>C++ Basic Syntax</h1>\r\nSyntax refers to the rules and regulations for writing statements in a programming language. They can also be viewed as the grammatical rules defining the structure of a programming language.</br>\r\n\r\nThe C++ language also has its syntax for the functionalities it provides. Different statements have different syntax specifying their usage, but C++ programs also have basic syntax rules that are followed throughout all the programs.</br></br>\r\n<b>1. Header File</b>\r\nThe header files contain the definition of the functions and macros we are using in our program. In line #1, we used the #include  <iostream> statement to tell the compiler to include an iostream header file library which stores the definition of the cin and cout standard input/output streams that we have used for input and output. #include is a preprocessor directive using which we import header files.</br>\r\n\r\n<b>2. Namespace</b>\r\nA namespace in C++ is used to provide a scope or a region where we define identifiers. In line #2, we have used the using namespace std statement for specifying that we will be the standard namespace where all the standard library functions are defined.</br>\r\n\r\n<b>3. Main Function</b>\r\nIn line #3, we defined the main function as int main(). The main function is the most important part of any C++ program. The program execution always starts from the main function. All the other functions are called from the main function. In C++, the main function is required to return some value indicating the execution status.</br>\r\n\r\n<b>4. Blocks</b>\r\nBlocks are the group of statements that are enclosed within { } braces. The body of the main function is from line #4 to line #9 enclosed within  { }.</br>\r\n<b>5. Semicolons</b>\r\nAs you may have noticed by now, each statement in the above code is followed by a ( ; ) semicolon symbol. It is used to terminate each line of the statement of the program.</br>\r\n\r\n<b>6. Identifiers</b>\r\nWe use identifiers for the naming of variables, functions, and other user-defined data types. An identifier may consist of uppercase and lowercase alphabetical characters, underscore, and digits. The first letter must be an underscore or an alphabet.</br>\r\n\r\n<b>7. Keywords</b>\r\nIn the C++ programming language, there are some reserved words that are used for some special meaning in the C++ program. It can’t be used for identifiers. For example, the words int, return, and using are some keywords used in our program.</br>\r\n\r\n<b>8. Basic Output cout</b>\r\nIn line #7, we have used the cout stream object (declared in the <iostream> header file) to print the sum of two numbers to the standard output stream (stdout).</br>\r\n<h3>C++ Variables</h3>\r\nIn C++, variable is a name given to a memory location. It is the basic unit of storage in a program. The value stored in a variable can be accessed or changed during program execution. In this article, we will learn about the variables in C++ and how to use them in our programs.</br>\r\n<b>Syntax of Variables</b></br>\r\nCreating a variable and giving it a name is called variable definition. The syntax of variable definition is:</br>\r\n<fieldset>\r\ntype name;\r\n</fieldset></br></br>\r\n<b>Types of Variables</b></br>\r\nIn C++, following are the data types a variable can store:</br>\r\n<ol>\r\n<li>int: For storing integers or whole numbers.</li>\r\n<li>float: For storing real numbers with decimal points.</li>\r\n<li>char: For storing single characters.\r\nbool: For storing boolean value i.e. true and false.</li>\r\n<li>string: For storing the textual data.</li></ol>\r\n<b>Constants in C</b>\r\nIn C programming, constants are read-only values that cannot be modified during the execution of a program. These constants can be of various types, such as integer, floating-point, string, or character constants. They are initialized with the declaration and remain same till the end of the program.\r\n'),
(4, 'Basic Input / Output in C++', '<h1>Basic Input / Output in C++</h1>\r\nIn C++, input and output are performed in the form of a sequence of bytes or more commonly known as streams.</br>\r\n\r\n<b>Input Stream: </b>If the direction of flow of bytes is from the device (for example, Keyboard) to the main memory then this process is called input.</br>\r\n<b>Output Stream:</b> If the direction of flow of bytes is opposite, i.e. from main memory to device (display screen) then this process is called output.</br></br>\r\nAll of these streams are defined inside the <iostream> header file which contains all the standard input and output tools of C++. The two instances cout and cin of iostream class are used very often for printing outputs and taking inputs respectively. These two are the most basic methods of taking input and printing output in C++.</br>\r\n\r\n<b>Standard Output Stream – cout</b>\r\nThe C++ cout is the instance of the ostream class used to produce output on the standard output device which is usually the display screen. The data needed to be displayed on the screen is inserted in the standard output stream (cout) using the insertion operator(<<</br></br>\r\n<b>Standard Input Stream – cin</b>\r\nThe C++ cin statement is the instance of the class istream and is used to read input from the standard input device which is usually a keyboard. The extraction operator (>>) is used along with the object cin for extracting the data from the input stream and store it in some variable in the program.</br>\r\n\r\n<b>Syntax</b>\r\n<fieldset>\r\ncin >> variable;\r\n</fieldset>');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `cpp`
--
ALTER TABLE `cpp`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `title` (`title`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `cpp`
--
ALTER TABLE `cpp`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;

-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Jan 30, 2025 at 05:01 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `project_db`
--

-- --------------------------------------------------------

--
-- Table structure for table `cprogram`
--

CREATE TABLE `cprogram` (
  `id` int(11) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `content` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `cprogram`
--

INSERT INTO `cprogram` (`id`, `title`, `content`) VALUES
(1, 'introduction of c programming language', 'History of C Language\r\nDennis Ritchie - founder of C language\r\n<h3>History of C language is interesting to know.</h3> Here we are going to discuss a brief history of the c language.\r\n\r\nC programming language was developed in 1972 by Dennis Ritchie at bell laboratories of AT&T (American Telephone & Telegraph), located in the U.S.A.\r\n\r\nDennis Ritchie is known as the founder of the c language.\r\n\r\nIt was developed to overcome the problems of previous languages such as B, BCPL, etc.\r\n</br>Initially, C language was developed to be used in UNIX operating system. It inherits many features of previous languages such as B and BCPL.\r\n<h4>Features of C Language</h4>\r\nC is the widely used language. It provides many features that are given below.\r\n<ol>\r\n<li>Simple</li>\r\n<li>Machine Independent or Portable</li>\r\n<li>Mid-level programming language</li>\r\n<li>structured programming language</li>\r\n<li>Rich Library</li>\r\n<li>Memory Management</li>\r\n<li>Fast Speed</li>\r\n<li>Pointers</li>\r\n<li>Recursion</li>\r\n<li>Extensible</li></ol>\r\n<h3>printf() and scanf() in C</h3>\r\nThe printf() and scanf() functions are used for input and output in C language. Both functions are inbuilt library functions, defined in stdio.h (header file).\r\n\r\n<h4>printf() function</h4>\r\nThe printf() function is used for output. It prints the given statement to the console.\r\n<h4>scanf() function</h4>\r\nThe scanf() function is used for input. It reads the input data from the console.\r\n<h4>Variables in C</h4>\r\nA variable is the name of the memory location. It is used to store information. Its value can be altered and reused several times. It is a way to represent memory location through symbols so that it can be easily identified.\r\n\r\nVariables are key building elements of the C programming language used to store and modify data in computer programs. A variable is a designated memory region that stores a specified data type value. Each variable has a unique identifier, its name, and a data type describing the type of data it may hold.\r\n<h4>Data Types in C</h4>\r\nA data type specifies the type of data that a variable can store such as integer, floating, character, etc.\r\n<h5>Int:</h5>\r\nIntegers are entire numbers without any fractional or decimal parts, and the int data type is used to represent them.\r\n\r\nIt is frequently applied to variables that include values, such as counts, indices, or other numerical numbers. The int data type may represent both positive and negative numbers because it is signed by default.\r\n\r\nAn int takes up 4 bytes of memory on most devices, allowing it to store values between around -2 billion and +2 billion.\r\n\r\n<h5>Char:</h5>\r\nIndividual characters are represented by the char data type. Typically used to hold ASCII or UTF-8 encoding scheme characters, such as letters, numbers, symbols, or commas. There are 256 characters that can be represented by a single char, which takes up one byte of memory. Characters such as \'A\', \'b\', \'5\', or \'$\' are enclosed in single quotes.\r\n\r\n<h5>Float:</h5>\r\nTo represent integers, use the floating data type. Floating numbers can be used to represent fractional units or numbers with decimal places.The float type is usually used for variables that require very good precision but may not be very precise. It can store values with an accuracy of about 6 decimal places and a range of about 3.4 x 1038 in 4 bytes of memory.\r\n<h5>Double:</h5>\r\nUse two data types to represent two floating integers. When additional precision is needed, such as in scientific calculations or financial applications, it provides greater accuracy compared to float.\r\n\r\nDouble type, which uses 8 bytes of memory and has an accuracy of about 15 decimal places, yields larger values. C treats floating point numbers as doubles by default if no explicit type is supplied.\r\n<h4>Derived Data Type</h4>\r\nBeyond the fundamental data types, C also supports derived data types, including arrays, pointers, structures, and unions. These data types give programmers the ability to handle heterogeneous data, directly modify memory, and build complicated data structures.\r\n\r\n<h5>Array:</h5>\r\nAn array, a derived data type, lets you store a sequence of fixed-size elements of the same type. It provides a mechanism for joining multiple targets of the same data under the same name.\r\n\r\nThe index is used to access the elements of the array, with a 0 index for the first entry. The size of the array is fixed at declaration time and cannot be changed during program execution. The array components are placed in adjacent memory regions.\r\n<h5>Pointer:</h5>\r\nA pointer is a derived data type that keeps track of another data type\'s memory address. When a pointer is declared, the data type it refers to is stated first, and then the variable name is preceded by an asterisk (*).\r\n<h4>Structure:</h4>\r\nA structure is a derived data type that enables the creation of composite data types by allowing the grouping of many data types under a single name. It gives you the ability to create your own unique data structures by fusing together variables of various sorts.\r\n<ol>\r\n<li>A structure\'s members or fields are used to refer to each variable within it.</li>\r\n<li>Any data type, including different structures, can be a member of a structure.</li>\r\n<li>A structure\'s members can be accessed by using the dot (.) operator.</li></ol>'),
(2, 'c variables and constants', '<h1>C Variables</h1>\r\nIn C, variable is a name given to the memory location that helps us to store some form of data and retrieves it when required. It allows us to refer to memory location without having to memorize the memory address. A variable name can be used in expressions as a substitute in place of the value it stores.\r\n<h3>Rules for Naming Variables in C</h3>\r\n<b>We can assign any name to the variable as long as it follows the following rules:</b>\r\n<ol>\r\n<li>A variable name must only contain alphabets, digits, and underscore.</li>\r\n<li>A variable name must start with an alphabet or an underscore only. It cannot start with a digit.\r\n.</li>\r\n<li>No white space is allowed within the variable name.</li>\r\n<li>A variable name must not be any reserved word or keyword.</li></ol>\r\n<h3>Constants in C</h3>\r\nThe constants in C are the read-only variables whose values cannot be modified once they are declared in the C program. The type of constant can be an integer constant, a floating pointer constant, a string constant, or a character constant. In C language, the const keyword is used to define the constants.\r\n\r\nIn this article, we will discuss about the constants in C programming, ways to define constants in C, types of constants in C, their properties and the difference between literals and constants.\r\n<h4>What is a constant in C?</h4>\r\nAs the name suggests, a constant in C is a variable that cannot be modified once it is declared in the program. We can not make any change in the value of the constant variables after they are defined.\r\n<h4>How to Define Constant in C?</h4>\r\nWe define a constant in C language using the const keyword. Also known as a const type qualifier, the const keyword is placed at the start of the variable declaration to declare that variable as a constant.\r\n<h4>Types of Constants in C</h4>\r\nThe type of the constant is the same as the data type of the variables. Following is the list of the types of constants\r\n<ol><li>Integer Constant</li>\r\n<li>Character Constant</li>\r\n<li>Floating Point Constant</li>\r\n<li>Double Precision Floating Point Constant</li>\r\n<li>Array Constant</li>\r\n<li>Structure Constant</li></ol>\r\nWe just have to add the const keyword at the start of the variable declaration.\r\n<h3>Properties of Constant in C</h3>\r\nThe important properties of constant variables in C defined using the const keyword are as follows:\r\n<h4>1. Initialization with Declaration</h4>\r\nWe can only initialize the constant variable in C at the time of its declaration. Otherwise, it will store the garbage value.\r\n<h4>2. Immutability</h4>\r\nThe constant variables in c are immutable after its definition, i.e., they can be initialized only once in the whole program. After that, we cannot modify the value stored inside that variable.\r\n<h3>Different ways to declare variable as constant in C</h3>\r\nThere are many different ways to make the variable as constant in C. Some of the popular ones are:\r\n<ol>\r\n<li>Using const Keyword</li>\r\n<li>Using Macros</li>\r\n<li>Using enum Keyword</li></ol>\r\n<h4>1. Using const Keyword</h4>\r\nThe const keyword specifies that a variable or object value is constant and can’t be modified at the compilation time.<br>\r\n<b>Syntax</b><br>\r\n<fieldset>\r\n\r\nconst data_type variable_name = initial_value;\r\n</fieldset>\r\n<b>Example</b>\r\n<code>\r\n<fieldset>\r\n// C program to demonstrate const specifier<br>\r\n#include <stdio.h><br>\r\nint main()<br>\r\n{<br>\r\n    const int num = 1;<br>\r\n\r\n    num = 5; // Modifying the value<br>\r\n    return 0;<br>\r\n}<br>\r\n</fieldset>\r\n</code><br><br>\r\n<b>Output</b>\r\n<fieldset>\r\nIt will throw as error like:<br>\r\nerror: assignment of read-only variable ‘num’</fieldset>\r\n<h4>2. Using Macros</h4>\r\nWe can also use Macros to define constant, but there is a catch. Since Macros are handled by the pre-processor(the pre-processor does text replacement in our source file, replacing all occurrences of ‘var’ with the literal 5) not by the compiler. Hence it wouldn’t be recommended because Macros doesn’t carry type checking information and also prone to error. In fact not quite constant as ‘var’ can be redefined like this.<br>\r\n<b>Syntax</b>\r\n<fieldset>\r\n#define name value\r\n</fieldset><br>\r\n<b>Example</b>\r\nThe below example demonstrates use of macros (#define).\r\n\r\nC\r\n<fieldset>\r\n// C program to demonstrate the problems\r\n// in \'Macros\'<br>\r\n#include <stdio.h><br>\r\n\r\n#define var 5<br>\r\nint main()<br>\r\n{<br>\r\n    printf(\"%d \", var);<br\r\n\r\n#ifdef var<br>\r\n#undef var<br>\r\n\r\n// redefine var as 10<br>\r\n#define var 10<br>\r\n#endif<br>\r\n\r\n    printf(\"%d\", var);<br>\r\n    return 0;<br>\r\n}<br>\r\n</fieldset>\r\n<b>Output</b>\r\n<fieldset>\r\n5  10\r\n</fieldset>\r\n<h4>3. Using enum Keyword</h4>\r\nEnumeration (or enum) is a user defined data type in C. It is mainly used to assign names to integral constants, that make a program easy to read and maintain.\r\n<b>Example</b>\r\nThe below example demonstrates use of the enum keyword.\r\n\r\nC\r\n<fieldset>\r\n// C program to illustrate the use of enums to declare<br>\r\n// constant<br>\r\n#include <stdio.h><br>\r\n\r\n// In C internally the default<br>\r\n// type of \'var\' is int<br>\r\nenum VARS { var = 42 };<br>\r\n\r\n// where mytype = int, char, long etc.<br>\r\n// but it can\'t be float, double or<br>\r\n// user defined data type.<br>\r\nint main()<br>\r\n{<br>\r\n    printf(\"The value of var: %d\", var);<br>\r\n\r\n    return 0;<br>\r\n}<br>\r\n\r\n</fieldset>\r\n<b>Output</b>\r\n<fieldset>\r\nThe value of var: 42\r\n</fieldset>\r\n'),
(3, 'Datatypes in c', '<h1>Data Types in C</h1>\r\nEach variable in C has an associated data type. It specifies the type of data that the variable can store like integer, character, floating, double, etc. Each data type requires different amounts of memory and has some specific operations which can be performed over it.<br><br>\r\n<table border=\"2\">\r\n<tr>\r\n<th>types</th>\r\n<th>descritpion</th>\r\n<th>datatypes</th>\r\n</tr>\r\n<tr>\r\n<td>Primitive Data Types</td>\r\n<td>Primitive data types are the most basic data types that are used for representing simple values such as integers, float, characters, etc.</td>\r\n<td>int, char, float, double, void</td>\r\n</tr>\r\n<tr>\r\n<td>Derived Types</td>\r\n<td>The data types that are derived from the primitive or built-in datatypes are referred to as Derived Data Types.</td>\r\n<td>array, pointers, function\r\n</td>\r\n<tr>\r\n<td>\r\nUser Defined Data Types\r\n</td>\r\n<td>\r\nThe user-defined data types are defined by the user himself.\r\n</td>\r\n<td>structure, union, enum</td>\r\n</tr>\r\n</table>\r\n<br><br>\r\nUnderstanding C’s data types is critical for writing efficient programs.\r\n\r\n<b>The following are some main primitive data types in C:</b><br>\r\n<h4>Table of Content</h4>\r\n<ol>\r\n<li>Integer Data Type</li>\r\n<li>Character Data Type</li>\r\n<li>Float Data Type<li>\r\n<li>Double Data Type</li>\r\n<li>Void Data Type</li></ol>\r\n<h3>Integer Data Type</h3>\r\nThe integer datatype in C is used to store the integer numbers (any number including positive, negative and zero without decimal part). Octal values, hexadecimal values, and decimal values can be stored in int data type in C.\r\n<ul>\r\n<li>*Range:  -2,147,483,648 to 2,147,483,647</li>\r\n<li>*Size: 4 bytes</li>\r\n<li>*Format Specifier: %d</li> </ul>\r\n<b>Syntax of Integer</b><br>\r\nWe use int keyword to declare the integer variable:\r\n<fieldset>\r\nint var_name;\r\n</fieldset>\r\nThe integer data type can also be used as\r\n<ol>\r\n<li>unsigned int: Unsigned int data type in C is used to store the data values from zero to positive numbers but it can’t store negative values like signed int.</li>\r\n<li>short int: It is lesser in size than the int by 2 bytes so can only store <li>values from -32,768 to 32,767.</li>\r\nlong int: Larger version of the int datatype so can store values greater than int.</li>\r\n<li>unsigned short int: Similar in relationship with short int as unsigned int with int.</li></ol>\r\n<h3>Character Data Type</h3>\r\nCharacter data type allows its variable to store only a single character. The size of the character is 1 byte. It is the most basic data type in C. It stores a single character and requires a single byte of memory in almost all compilers.\r\n<ol>\r\n<li>*Range: (-128 to 127) or (0 to 255)</li>\r\n<li>*Size: 1 byte</li>\r\n<li>*Format Specifier: %c</li>\r\n</ol>\r\n<h4>Syntax of char</h4>\r\nThe char keyword is used to declare the variable of character type:\r\n<fieldset>\r\nchar var_name;\r\n</fieldset>\r\n<h3>Float Data Type</h3>\r\nIn C programming float data type is used to store floating-point values. Float in C is used to store decimal and exponential values. It is used to store decimal numbers (numbers with floating point values) with single precision.\r\n<ul>\r\n<li>*Range: 1.2E-38 to 3.4E+38</li>\r\n<li>*Size: 4 bytes</li>\r\n<li>*Format Specifier: %f</li></ul>\r\n<h4>Syntax of float</h4>\r\nThe float keyword is used to declare the variable as a floating point:\r\n<fieldset>\r\nfloat var_name;\r\n</fieldset>\r\n<h3>Double Data Type</h3>\r\nA Double data type in C is used to store decimal numbers (numbers with floating point values) with double precision. It is used to define numeric values which hold numbers with decimal values in C.\r\n\r\nThe double data type is basically a precision sort of data type that is capable of holding 64 bits of decimal numbers or floating points. Since double has more precision as compared to that float then it is much more obvious that it occupies twice the memory occupied by the floating-point type. It can easily accommodate about 16 to 17 digits after or before a decimal point.\r\n<ul>\r\n<li>*Range: 1.7E-308 to 1.7E+308</li>\r\n<li>*Size: 8 bytes</li>\r\n<li>Format Specifier: %lf</li></ul>\r\n<h4>Syntax of Double</h4>\r\nThe variable can be declared as double precision floating point using the double keyword:\r\n<fieldset>\r\ndouble var_name;\r\n</fieldset>\r\n<h3>Void Data Type</h3>\r\nThe void data type in C is used to specify that no value is present. It does not provide a result value to its caller. It has no values and no operations. It is used to represent nothing. Void is used in multiple ways as function return type, function arguments as void, and pointers to void.\r\n<br>\r\n<b>Syntax:</b>\r\n<fieldset>\r\n// function return type void<br>\r\nvoid exit(int check);<br>\r\n// Function without any parameter can accept void.<br>\r\nint print(void);<br>\r\n// memory allocation function which<br>\r\n// returns a pointer to void.<br>\r\nvoid *malloc (size_t size);<br>\r\n</fieldset>\r\n'),
(4, 'c input/output', '<h1>Basic Input and Output in C</h1>\r\nIn C programming, input and output operations refer to reading data from external sources and writing data to external destinations outside the program. C provides a standard set of functions to handle input from the user and output to the screen or to files. These functions are part of the standard input/output library <stdio.h>.\r\n\r\nIn C, there are many functions used for input and output in different situations but the most commonly used functions for Input/Output are scanf() and printf() respectively.\r\n<br>\r\n<h3>Standard Output Function – printf()</h3>\r\nThe printf() function is used to print formatted output to the standard output stdout (which is generally the console screen). It is one of the most commonly used functions in C.\r\n<br>\r\n<b>Syntax</b>\r\n<fieldset>\r\nprintf(“formatted_string”, variables/values);\r\n</fieldset>\r\n<b>Parameter:</b>\r\n<ul>\r\n<li>*formatted_string: It is a string that specifies the data to be printed. It may also contain a format specifier as a placeholder to print the value of any variable or value.</li>\r\n<li>*args…: These are the variable/values corresponding to the format specifier.</li></ul>\r\n<b>Return Value:</b>\r\n<ul>\r\n<li>*Returns the number of characters printed after successful execution.</li>\r\n<li>*If an error occurs, a negative value is returned.</li></ol>\r\nTo learn how to make the most of printf() and other input/output functions in C, explore ourC programming course, which covers essential I/O operations in detail.<br>\r\n<big><b>Format Specifier in printf</b></big><br>\r\nThe format string inside printf() can include various format specifiers whose primary function is to act as a placeholder for printing the variables and values. These format specifiers start with the percentage symbol (%).\r\n\r\nIn addition to working as placeholders, format specifiers can also contain a few more instructions to manipulate how the data is displayed in the output.\r\n<h3>Standard Input Function – scanf()</h3>\r\nscanf() is used to read user input from the console. It takes the format string and the addresses of the variables where the input will be stored.\r\n<br>\r\n<b>Syntax</b>\r\n<fieldset>\r\nprintf(“formatted_string”, address_of_variables/values);\r\n</fieldset>\r\n<b>Return Value of scanf</b>\r\n<ul>\r\nThe scanf in C returns three types of values:\r\n\r\n<li>*>0: The number of values converted and assigned successfully.</li>\r\n<li>*0: No value was assigned.</li>\r\n<li>*<0: Read error encountered or end-of-file(EOF) reached before any assignment was made.</li>\r\n\r\n\r\n'),
(5, 'Operators in c', '<h1>Operators in C</h1>\r\nLast Updated : 11 Oct, 2024\r\nIn C language, operators are symbols that represent operations to be performed on one or more operands. They are the basic components of the C programming. In this article, we will learn about all the built-in operators in C with examples.\r\n\r\n<h3>What is a C Operator?</h3>\r\nAn operator in C can be defined as the symbol that helps us to perform some specific mathematical, relational, bitwise, conditional, or logical computations on values and variables. The values and variables used with operators are called operands. So we can say that the operators are the symbols that perform operations on operands.<br>\r\n<b>For example</b>\r\n<fieldset>\r\nc = a + b;\r\n</fieldset>\r\nHere, ‘+’ is the operator known as the addition operator, and ‘a’ and ‘b’ are operands. The addition operator tells the compiler to add both of the operands ‘a’ and ‘b’. To dive deeper into how operators are used with data structures, the C Programming Course Online with Data Structures covers this topic thoroughly.\r\n\r\n<h4>Types of Operators in C</h4>\r\nC language provides a wide range of operators that can be classified into 6 types based on their functionality:\r\n<ol>\r\n<li>Arithmetic Operators</li>\r\n<li>Relational Operators</li>\r\n<li>Logical Operators</li>\r\n<li>Bitwise Operators</i>\r\n<li>Assignment Operators</li>\r\n<li>Other Operators</li></ol>\r\n<h2>1. Arithmetic Operations in C</h2>\r\nThe arithmetic operators are used to perform arithmetic/mathematical operations on operands. There are 9 arithmetic operators in C language:\r\n<table border=\"1\">\r\n<tr>\r\n<th>s.no</th>\r\n<th>Symbol</th>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Syntax</th>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td>+</td>\r\n<td>plus</td>\r\n<td>Adds two numeric values.</td>\r\n<td>a+b</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td>-</td>\r\n<td>minus</td>\r\n<td>Subtracts right operand from left operand</td>\r\n<td>a-b</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>*</td>\r\n<td>minus</td>\r\n<td>Multiply two numeric values.</td>\r\n<td>a*b</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td>/</td>\r\n<td>divide</td>\r\n<td>Divide two numeric values.</td>\r\n<td>a/b</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td>%</td>\r\n<td>module</td>\r\n<td>Divide two numeric values.</td>\r\n<td>a%b</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td>+</td>\r\n<td>unary plus</td>\r\n<td>Used to specify the positive values</td>\r\n<td>+a</td>\r\n</tr>\r\n<tr>\r\n<td>7</td>\r\n<td>-</td>\r\n<td>unary minus</td>\r\n<td>Flips the sign of the value.</td>\r\n<td>-a</td>\r\n</tr>\r\n<tr>\r\n<td>8</td>\r\n<td>++</td>\r\n<td>increment</td>\r\n<td>Increases the value of the operand by 1</td>\r\n<td>a++</td>\r\n</tr>\r\n<tr>\r\n<td>9</td>\r\n<td>--</td>\r\n<td>decrement</td>\r\n<td>decreases the value of the operand by 1</td>\r\n<td>a--</td>\r\n</tr>\r\n</table>\r\n\r\n');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `cprogram`
--
ALTER TABLE `cprogram`
  ADD PRIMARY KEY (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
